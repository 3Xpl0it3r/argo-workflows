// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	sqldb "github.com/argoproj/argo-workflows/v3/persist/sqldb"
	v1alpha1 "github.com/argoproj/argo-workflows/v3/pkg/apis/workflow/v1alpha1"
	mock "github.com/stretchr/testify/mock"
)

// OffloadNodeStatusRepo is an autogenerated mock type for the OffloadNodeStatusRepo type
type OffloadNodeStatusRepo struct {
	mock.Mock
}

// Delete provides a mock function with given fields: clusterName, uid, version
func (_m *OffloadNodeStatusRepo) Delete(clusterName string, uid string, version string) error {
	ret := _m.Called(clusterName, uid, version)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(clusterName, uid, version)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: clusterName, uid, version
func (_m *OffloadNodeStatusRepo) Get(clusterName string, uid string, version string) (v1alpha1.Nodes, error) {
	ret := _m.Called(clusterName, uid, version)

	var r0 v1alpha1.Nodes
	if rf, ok := ret.Get(0).(func(string, string, string) v1alpha1.Nodes); ok {
		r0 = rf(clusterName, uid, version)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(v1alpha1.Nodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(clusterName, uid, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsEnabled provides a mock function with given fields:
func (_m *OffloadNodeStatusRepo) IsEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with given fields: clusterName, namespace
func (_m *OffloadNodeStatusRepo) List(clusterName string, namespace string) (map[sqldb.UUIDVersion]v1alpha1.Nodes, error) {
	ret := _m.Called(clusterName, namespace)

	var r0 map[sqldb.UUIDVersion]v1alpha1.Nodes
	if rf, ok := ret.Get(0).(func(string, string) map[sqldb.UUIDVersion]v1alpha1.Nodes); ok {
		r0 = rf(clusterName, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[sqldb.UUIDVersion]v1alpha1.Nodes)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clusterName, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOldOffloads provides a mock function with given fields: clusterName, namespace
func (_m *OffloadNodeStatusRepo) ListOldOffloads(clusterName string, namespace string) (map[string][]string, error) {
	ret := _m.Called(clusterName, namespace)

	var r0 map[string][]string
	if rf, ok := ret.Get(0).(func(string, string) map[string][]string); ok {
		r0 = rf(clusterName, namespace)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(clusterName, namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: clusterName, uid, namespace, nodes
func (_m *OffloadNodeStatusRepo) Save(clusterName string, uid string, namespace string, nodes v1alpha1.Nodes) (string, error) {
	ret := _m.Called(clusterName, uid, namespace, nodes)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, v1alpha1.Nodes) string); ok {
		r0 = rf(clusterName, uid, namespace, nodes)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, v1alpha1.Nodes) error); ok {
		r1 = rf(clusterName, uid, namespace, nodes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
